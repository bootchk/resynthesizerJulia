
The "Resynthesizer" algorithm for texture transfer in images.
An "inpainting" algorithm, among other things.

Ported from C to Julia.
Derived from https://github.com/bootchk/resynthesizer.git.
Minimal changes to the algorithm, but significant refactoring.

!!! Work in progress !!!
The current status is that the "heal selection" feature *might* work in 2D like the original.
Currently struggling with performance and fidelity with the original.

I'm just learning Julia.
There is much cruft: files and code that are not used or not correct.

The goals:
  - just as fast as the C version
  - smaller code, easier to read and understand
  - more general: work with multiple dimensions
    e.g. 1D text, 2D poetry, 2D images, 3D video, 3D music?

IOW test that Julia does permit generalized algorithms

Copyright 2021 Lloyd Konneker

Original algorithm by Paul Harrison.


Resynthesizer is fundamentally a search algorithm.
Specifically, a search for a best match, not an exact match.
And a search using a context: not search for an element, but patches around an element.
This project thus aims to be a very generalized search algorithm.

Basic testing instructions, starting from scratch


>cd resynthesizerJulia

Activate the test project from the REPL in pkg mode
>julia
julia>]
pkg> activate test

Run the file that contains the testset

>julia --project=test test/resynthesizer.jl



From the REPL

Install julia

Start REPL

install packages,
or use a package.toml ???
(installs many supporting packages)

>import Pkg; Pkg.add("ReferenceTests")
>import Pkg; Pkg.add("TestImages")
>import Pkg; Pkg.add("ImageMagick")
>import Pkg; Pkg.add("ColorTypes")

Import the test framework
> using ReferenceTests
(compiles a long time)

Run the test suite by name
@testset "Resynthesizer"
